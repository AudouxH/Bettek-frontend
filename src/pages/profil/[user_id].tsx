import Head from "next/head";
import styles from "@/styles/Profil.module.css";
import NavigationBar from "@/components/NavigationBar/NavigationBarComponent";
import { Pie } from "react-chartjs-2";
import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, ArcElement } from "chart.js";
import Avvvatars from 'avvvatars-react';
import { useUser } from "@/contexts/userContext";
import betHistory from '../../datas/userBetHistory.json';
import BetHistory from "@/components/BetHistory/BetHistoryComponent";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import useFetchBackendData from "@/hooks/fetchBackendData";
import IUserPost from "@/interfaces/IUserPost";
import IUserBet from "@/interfaces/IUserBet";
import IUserStats from "@/interfaces/IUserStats";
import UserPost from "@/components/UserPost/UserPostComponent";

ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, ArcElement, Title, Tooltip, Legend);

export default function Profil() {
  const [profilID, setProfilID] = useState<string>();
  const [profilStats, setProfilStats] = useState<IUserStats>();
  const [profilBets, setProfilBets] = useState<IUserBet[]>();
  const [profilPosts, setProfilPosts] = useState<IUserPost[]>();
  const { userName, userToken, userID } = useUser();
  const { getProfilData, getUserBets, getUserPost } = useFetchBackendData();
  const router = useRouter();
  const { user_id } = router.query;

  useEffect(() => {
    (userToken == null || userToken == undefined) && router.push("/");
  }, [userToken, router]);

  useEffect(() => {
    user_id != null && user_id != undefined && setProfilID(user_id.toString());
  }, [user_id]);

  useEffect(() => {
    const getProfilDatas = async (userID: string) => {
      const stats: IUserStats = await getProfilData(userID);
      const bets: IUserBet[] = await getUserBets(userID);
      const posts: IUserPost[] = await getUserPost(userID);
      setProfilStats(stats);
      setProfilBets(bets);
      setProfilPosts(posts);
    }
    profilID != null && profilID != undefined && getProfilDatas(profilID);
    (profilID == null || profilID == undefined) && userID != undefined && getProfilDatas(userID.toString());
  }, [profilID])

  // const totalWins = Math.round(userStats.win_ratio * userStats.total_bets);
  // const totalLosses = userStats.total_bets - totalWins;
  // const netWins = (totalWins * userStats.average_odd) - userStats.total_bets;
  // const roi = Math.round((netWins / userStats.total_bets) * 100);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <NavigationBar />
        <div className={styles.profileContainer}>
          <div className={styles.profileHeader}>
            <Avvvatars value={userName ?? 'test'} style="shape" />
            <h1 className={styles.username}>{userName ?? 'test'}</h1>
          </div>
          <div className={styles.statsContainer}>
            {/* <Pie data={{data}} */}
          </div>
          <div className={styles.profileBets}>
            {
              profilBets ?
              profilBets.map((bet: IUserBet) => {
                return (
                  <BetHistory bet={bet} key={bet.id}/>
                );
              }) : null
            }
            </div>
          {
            profilPosts ? 
            profilPosts.map((post: IUserPost) => {
              return (
                <UserPost post={post} key={post.id}/>
              );
            }) : null
          }
        </div>
      </main>
    </>
  );
}
